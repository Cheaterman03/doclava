#summary Getting Started with Doclava

= Getting Started =

== Building Doclava ==
The Doclava source comes bundled with an [http://ant.apache.org/ ant] script to build the doclet. The "jar" task will build a jar containing Doclava and all necessary dependencies.

== Using Doclava with Javadoc ==
Doclava is implented as a Doclet, and can be used anywhere [http://www.oracle.com/technetwork/java/javase/documentation/index-jsp-135444.html Javadoc] is used.

The command line arguments to pass to Javadoc to use Doclava are:
{{{
  -doclet com.google.doclava.Doclava
  -docletpath ${jar.file}
}}}

Be sure to see the list of Doclava's [CommandLineArguments command line arguments].

== Using Doclava with Ant ==
Ant's built-in [http://ant.apache.org/manual/Tasks/javadoc.html javadoc task] can be configured to use third-party doclets. The following is an example of how Doclava builds its own documentation:

{{{
<project>
  ...
  <target name="doclava" depends="jar">
    <javadoc packagenames="com.google.*"
           destdir="build/docs"
           sourcepath="src"
           docletpath="${jar.file}"
           bootclasspath="${javahome}/jre/lib/rt.jar"
           >
      <doclet name="com.google.doclava.Doclava">
        <param name="-stubs" value="build/stubs" />
        <param name="-hdf"/> <param name="project.name"/> <param name="Doclava"/>
        <param name="-since"/> <param name="doclava/previous.xml"/> <param name="v1" />
        <param name="-apiversion" value="v2"/>
      </doclet>
    </javadoc>
  </target>
</project>
}}}

Note that some [CommandLineArguments command line arguments] take more than one value, and so cannot be specified using {{{<param name="-foo" value="bar"/>}}} elements. Instead, list each value in its own element, as in {{{<param name="-foo"/> <param name="val1"/> <param name="val2"/>}}}.


== Using Doclava with Maven ==
See [http://maven.apache.org/plugins/maven-javadoc-plugin/examples/alternate-doclet.html Maven's guide for using alternate doclets.] Use the doclet "com.google.doclava.Doclava" and be sure to have the .jar specified in your fully qualified docletPath. An example of using Doclava with Maven:
{{{
<project>
  ...
  <build>
    <plugins>
      ...
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-javadoc-plugin</artifactId>
        <version>2.7</version>
        <configuration>
          <bootclasspath>${java.home}/lib/rt.jar</bootclasspath>
          <docletPath>/full/path/to/doclava.jar</docletPath>
          <doclet>com.google.doclava.Doclava</doclet>
          <additionalparam>
             -quiet
             -federate JDK http://download.oracle.com/javase/6/docs/api/index.html?
             -federationxml JDK http://doclava.googlecode.com/svn/static/api/openjdk-6.xml
             -hdf project.name "My Project"
           </additionalparam>
          <useStandardDocletOptions>false</useStandardDocletOptions>
        </configuration>
      </plugin>
    </plugins>
  </build>
</project>
}}}